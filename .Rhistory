ba_year_class_D <- ba_site_class2_D |>
group_by(year, class)|>
summarise(ba_year_class = (sum(ba_site)/n_sites),
CI_low =  min(ba_site), #calculating low limit of Confidence interval
CI_high = max(ba_site)) #calculating high limit of confidence interval
write.csv(ba_year_class_D, 'Tables/BasalAreaClassD.csv', row.names = FALSE)
ba_year_D <- ba_site_class2_D |>
group_by(year, site) |>
summarise(ba_site = sum(ba_site))|>
group_by(year) |>
summarise(ba_year = (sum(ba_site)/n_sites),
CI_low =  min(ba_site),#low limit of confidence interval
CI_high = max(ba_site)) #high limit of confidence interval
write.csv(ba_year_D, 'Tables/BasalAreaD.csv', row.names = FALSE)
}
yearba_D <-
ggplot(ba_year_D, aes(x = year, y = ba_year)) +
geom_line(linewidth = 0.75, color = 'gray30') +
geom_errorbar(aes(ymin = CI_low, ymax = CI_high), width = 0.5, linewidth = 0.75, color = 'gray30') +
geom_point(size = 4, color = 'gray30') +
labs(y = bquote('Mean basal Area ' ~ (m^2/ha)),
x = 'Year')+
scale_y_continuous(expand = c(0,0), limits = c(0, 1.05*max(ba_year$CI_high)))+
scale_x_continuous(breaks = scales::pretty_breaks(n=10))+
theme_light()+
theme_veg()
yearba_D
ggsave('BasalAreaD.jpg', dpi = 600, path = "Graphs") #saves basal area graph to Output Graphs
ba_by_class_D <-
ggplot(ba_year_class_D, aes(x = class, y = ba_year_class, fill = factor(year))) +
geom_col(position = 'dodge') +
geom_errorbar(aes(ymin = CI_low, ymax = CI_high),
position = position_dodge(0.9), width = 0.2, linewidth = 0.2) +
scale_y_continuous(expand = c(0,0), limits = c(0, 1.05*max(ba_year_class$CI_high)))+
scale_fill_grey() +
labs(y = bquote('Mean basal Area ' ~ (m^2/ha)), fill = "Year",
) +
theme_light()+
theme_veg()
ba_by_class_D
ggsave('BasalAreaClassD.jpg', dpi = 600, path= "Graphs", height =5)#saves basal area by class graph to Output Graphs
density <- overstory1 |>
filter(Condition == 'L', SpeciesCode != "SNAG")|> #filters out dead trees and snags
group_by(year = Year2, site, class)|> # note how you can rename things in a group_by.
summarise(count = n(), .groups = 'drop') #count number of stems in each density class for each year, site
density1 <- left_join(supplement, density, by = c("year", "site", "class"))
density1$count[is.na(density1$count)] <- 0
density1$areadensity = density1$count/0.1
# Iterate across year and class to get bootstrapped confidence intervals of ba
if (n_sites >= 7) { #this runs if sites are >7
density_year_class <-
purrr::map2(yxc_df$year, yxc_df$class, # iterate on each year x class combination
function(yr, cls){
# create dataset for a given year x class combination
dat <- density1 |> filter(year == yr & class == cls)
# create a data frame of bootstrapped means and bind list as rows in df
dat2 <- data.frame(do.call(rbind, replicate(reps, boot_fun(dat, "areadensity"), simplify = T)))
# name the only column returned, so easier to specify below
colnames(dat2) <- "samp_mean"
# create a dataframe with mean of the raw data.
dat3 <- data.frame(dens_year_class = mean(dat$areadensity), # mean of raw data
CI_high = quantile(dat2$samp_mean, probs = 0.975, names = F), # upper 95% of bootstrapped means
CI_low = quantile(dat2$samp_mean, probs = 0.025, names = F),
year = yr,
class = cls,
num_boots = reps)
}) |> list_rbind() |> # bind output as rows of dataframe, instead of list
select(year, class, dens_year_class, CI_low, CI_high, num_boots)
write.csv(density_year_class, 'Tables/DensityClass.csv', row.names = FALSE)
density_year_class
density_year <-   purrr::map(year, # iterate on each year x class combination
function(yr){
# create dataset for a given year x site combination
dat <- density1 |> filter(year == yr) |> group_by(site) |> summarize(areadensity = sum(areadensity))
# create a data frame of bootstrapped means and bind list as rows in df
dat2 <- data.frame(do.call(rbind, replicate(reps, boot_fun(dat, "areadensity"), simplify = T)))
# name the only column returned, so easier to specify below
colnames(dat2) <- "samp_mean"
# create a dataframe with mean of the raw data.
dat3 <- data.frame(dens_year = mean(dat$areadensity), # mean of raw data
CI_high = quantile(dat2$samp_mean, probs = 0.975, names = F), # upper 95% of bootstrapped means
CI_low = quantile(dat2$samp_mean, probs = 0.025, names = F),
year = yr,
num_boots = reps)
}) |> list_rbind() |> # bind output as rows of dataframe, instead of list
select(year, dens_year, CI_low, CI_high, num_boots)
write.csv(density_year, 'Tables/Density.csv', row.names = FALSE)
density_year
} else { #this runs if sites < 7
density_year_class <- density1 |>
group_by(year, class)|>
summarise(dens_year_class = sum(areadensity)/n_sites, #mean by year, class
CI_low = min(areadensity),#calculating low limit of Confidence interval
CI_high = max(areadensity))#calculating high limit of Confidence interval
write.csv(density_year_class, 'Tables/DensityClass.csv', row.names = FALSE)
density_year_class
density_year <- density1 |>
group_by(year,site)|>
summarise(SiteDensity = sum(areadensity))|>
group_by(year)|>
summarise(dens_year = (sum(SiteDensity)/n_sites), #calculate mean by year
CI_low = min(SiteDensity),#calculating low limit of Confidence interval
CI_high = max(SiteDensity))#calculating high limit of Confidence interval
write.csv(density_year, 'Tables/Density.csv', row.names = FALSE)
density_year
}
yeardensity <-
ggplot(density_year, aes(x = year, y = dens_year)) +
geom_line(linewidth = 0.75, color = 'gray30') +
geom_errorbar(aes(ymin = CI_low, ymax = CI_high), width = 0.5, linewidth = 0.75, color = 'gray30') +
geom_point(size = 4, color = 'gray30') +
labs(y = 'Mean Stem Density (stem/ha)',
x = 'Year')+
scale_y_continuous(expand = c(0,0), limits = c(0, 1.05*max(density_year$CI_high)))+
scale_x_continuous(breaks = scales::pretty_breaks(n=10))+
theme_light()+
theme_veg()
yeardensity
ggsave('Density.jpg', dpi = 600, path = "Graphs") #saves density graph to Output Graphs
class_density <-
ggplot(density_year_class, aes(x = class, y = dens_year_class, fill = factor(year))) +
geom_col(position = 'dodge') +
geom_errorbar(aes(ymin = CI_low, ymax = CI_high),
position = position_dodge(0.9), width = 0.2, linewidth = 0.2) +
scale_y_continuous(expand = c(0,0), limits = c(0, 1.05*max(density_year_class$CI_high)))+
scale_fill_grey() +
labs(y = 'Mean Stem Density (stem/ha)', fill = "Year",
x = 'Class') +
theme_light()+
theme_veg()
class_density
ggsave('DensityClass.jpg', dpi = 600, path= "Graphs", height =5)#saves basal area by class graph to Output Graphs
density_D <- overstory1 |>
filter(Condition == 'D'| SpeciesCode == "SNAG") |> #filters out dead trees and snags
group_by(year = Year2, site, class)|> # note how you can rename things in a group_by.
summarise(count = n(), .groups = 'drop') #count number of stems in each density class for each year, site
density1_D <- left_join(supplement, density_D, by = c("year", "site", "class"))
density1_D$count[is.na(density1_D$count)] <- 0
density1_D$areadensity = density1_D$count/0.1
# Iterate across year and class to get bootstrapped confidence intervals of ba
if (n_sites >= 7) { #this runs if sites are >7
density_year_class_D <-
purrr::map2(yxc_df$year, yxc_df$class, # iterate on each year x class combination
function(yr, cls){
# create dataset for a given year x class combination
dat <- density1_D |> filter(year == yr & class == cls)
# create a data frame of bootstrapped means and bind list as rows in df
dat2 <- data.frame(do.call(rbind, replicate(reps, boot_fun(dat, "areadensity"), simplify = T)))
# name the only column returned, so easier to specify below
colnames(dat2) <- "samp_mean"
# create a dataframe with mean of the raw data.
dat3 <- data.frame(dens_year_class = mean(dat$areadensity), # mean of raw data
CI_high = quantile(dat2$samp_mean, probs = 0.975, names = F), # upper 95% of bootstrapped means
CI_low = quantile(dat2$samp_mean, probs = 0.025, names = F),
year = yr,
class = cls,
num_boots = reps)
}) |> list_rbind() |> # bind output as rows of dataframe, instead of list
select(year, class, dens_year_class, CI_low, CI_high, num_boots)
write.csv(density_year_class_D, 'Tables/DensityClassD.csv', row.names = FALSE)
density_year_class_D
density_year_D <-   purrr::map(year, # iterate on each year x class combination
function(yr){
# create dataset for a given year x site combination
dat <- density1_D |> filter(year == yr) |> group_by(site) |> summarize(areadensity = sum(areadensity))
# create a data frame of bootstrapped means and bind list as rows in df
dat2 <- data.frame(do.call(rbind, replicate(reps, boot_fun(dat, "areadensity"), simplify = T)))
# name the only column returned, so easier to specify below
colnames(dat2) <- "samp_mean"
# create a dataframe with mean of the raw data.
dat3 <- data.frame(dens_year = mean(dat$areadensity), # mean of raw data
CI_high = quantile(dat2$samp_mean, probs = 0.975, names = F), # upper 95% of bootstrapped means
CI_low = quantile(dat2$samp_mean, probs = 0.025, names = F),
year = yr,
num_boots = reps)
}) |> list_rbind() |> # bind output as rows of dataframe, instead of list
select(year, dens_year, CI_low, CI_high, num_boots)
write.csv(density_year_D, 'Tables/DensityD.csv', row.names = FALSE)
density_year_D
} else { #this runs if sites < 7
density_year_class_D <- density1_D |>
group_by(year, class)|>
summarise(dens_year_class = sum(areadensity)/n_sites, #mean by year, class
CI_low = min(areadensity),#calculating low limit of Confidence interval
CI_high = max(areadensity))#calculating high limit of Confidence interval
write.csv(density_year_class_D, 'Tables/DensityClassD.csv', row.names = FALSE)
density_year_class_D
density_year_D <- density1_D |>
group_by(year,site)|>
summarise(SiteDensity = sum(areadensity))|>
group_by(year)|>
summarise(dens_year = (sum(SiteDensity)/n_sites), #calculate mean by year
CI_low = min(SiteDensity),#calculating low limit of Confidence interval
CI_high = max(SiteDensity))#calculating high limit of Confidence interval
write.csv(density_year_D, 'Tables/DensityD.csv', row.names = FALSE)
density_year_D
}
yeardensity_D <-
ggplot(density_year_D, aes(x = year, y = dens_year)) +
geom_line(linewidth = 0.75, color = 'gray30') +
geom_errorbar(aes(ymin = CI_low, ymax = CI_high), width = 0.5, linewidth = 0.75, color = 'gray30') +
geom_point(size = 4, color = 'gray30') +
labs(y = 'Mean Stem Density (stem/ha)',
x = 'Year')+
scale_y_continuous(expand = c(0,0), limits = c(0, 1.05*max(density_year$CI_high)))+ #leave as alive y-axis bounds to make graphs comprable
scale_x_continuous(breaks = scales::pretty_breaks(n=10))+
theme_light()+
theme_veg()
yeardensity_D
ggsave('DensityD.jpg', dpi = 600, path = "Graphs") #saves density graph to Output Graphs
class_density_D <-
ggplot(density_year_class_D, aes(x = class, y = dens_year_class, fill = factor(year))) +
geom_col(position = 'dodge') +
geom_errorbar(aes(ymin = CI_low, ymax = CI_high),
position = position_dodge(0.9), width = 0.2, linewidth = 0.2) +
scale_y_continuous(expand = c(0,0), limits = c(0, 1.05*max(density_year_class$CI_high)))+#leave as alive y-axis bounds to make graphs comprable
scale_fill_grey() +
labs(y = 'Mean Stem Density (stem/ha)', fill = "Year",
x = 'Class') +
theme_light()+
theme_veg()
class_density_D
ggsave('DensityClassD.jpg', dpi = 600, path= "Graphs", height =5)#saves basal area by class graph to Output Graphs
## Calculating species change by BA
species_ba_site <- overstory1 |>
filter(Condition == "L")|> #filter for only Live trees
mutate(ba_ha = DBH^2*(0.00007854/0.1)) |> #convert DBH to BA scaled to hectare
group_by(year = Year2, site, AcceptedSpecies)|>
summarise(ba_site = sum(ba_ha, na.rm = T), .groups = 'drop') #summarise total BA of site
species_ba <- species_ba_site |>
group_by(year, AcceptedSpecies)|>
summarise(meanba = sum(ba_site, na.rm = T)/n_sites,  #calculate mean ba_site for entire year
.groups = 'drop') #summarise basal area mean across sites
pivotspecies_ba <- species_ba |> pivot_wider(names_from = year, values_from = meanba, values_fill = 0) |> #make into pivot table for more accessible export
arrange(AcceptedSpecies) |> data.frame()
current_col <- which(grepl(current, names(pivotspecies_ba))) # Find column that matches current year
first_col <- which(grepl(first, names(pivotspecies_ba))) # Find column that matches first year
pivotspecies_ba$change <- pivotspecies_ba[,current_col] - pivotspecies_ba[,first_col] # Calc change between first year and most current year
pivotspecies_ba$direction <- ifelse(pivotspecies_ba$change > 0, "Increase", "Decrease") #designation direction of change for graphs
write.csv(pivotspecies_ba, "Tables/SpeciesBA.csv", row.names = FALSE)
pivotspecies_ba
## Calculating species change by Density
species_density_site <- overstory1 |>
filter(Condition == "L")|> #filter for only living trees
group_by(year = Year2, site, AcceptedSpecies)|>
summarise(stem_ha = sum(!is.na(DBH))/0.1, .groups = 'drop') #calculates total density of site
species_density <- species_density_site |>
group_by(year, AcceptedSpecies)|>
summarise(meandensity = sum(stem_ha)/n_sites, .groups = 'drop') #calculates year mean density for each species
pivotspecies_density <- species_density |> pivot_wider(names_from = year, values_from = meandensity, values_fill = 0) |> #make into pivot table for more accessible export
arrange(AcceptedSpecies) |> data.frame()
current_col <- which(grepl(current, names(pivotspecies_density))) # Find column that matches current year
first_col <- which(grepl(first, names(pivotspecies_density))) # Find column that matches first year
pivotspecies_density$change <- pivotspecies_density[,current_col] - pivotspecies_density[,first_col] # Calc. change
pivotspecies_density$direction <- ifelse(pivotspecies_density$change > 0, "Increase", "Decrease")
write.csv(pivotspecies_density, 'Tables/SpeciesDensity.csv')
pivotspecies_density
pct_occ1 <- overstory1 |>
filter(Year2 == current)|>
group_by(site, AcceptedSpecies) |>
summarize(present = ifelse(sum(!is.na(DBH)) > 0, 1, 0), .groups = 'drop') |>
group_by(AcceptedSpecies)|>
summarize(percentoccurrence = sum(present)/n_sites*100, .groups = 'drop')|>
select(AcceptedSpecies, percentoccurrence)
acc_spp <- data.frame(AcceptedSpecies = sort(unique(overstory1$AcceptedSpecies)))
pct_occ <- right_join(pct_occ1, acc_spp, by = "AcceptedSpecies") |>
mutate(percentoccurrence = ifelse(is.na(percentoccurrence), 0, percentoccurrence)) |>
arrange(AcceptedSpecies) |>
left_join(species, by = "AcceptedSpecies") |>
select(AcceptedSpecies, USDA_CName, percentoccurrence)
write.csv(pct_occ, "Tables/PercentOccurrence.csv", row.names = F)
## Subtraction change in BA
ggplot(pivotspecies_ba,
aes(y = reorder(AcceptedSpecies, desc(AcceptedSpecies)),
x = change, fill = factor(direction)))+ # sets ggplot to show species change in density
geom_col(width = 0.4)+ #makes the ggplot a barplot
theme_light()+ #background theme
labs(y = 'Species Name', x = 'Change in Mean Basal Area', fill = "Direction")+ #x axis label
scale_fill_manual(breaks = c('Decrease', 'Increase'),
values = c('#FDB338', '#025196'))+ #manually setting color scale
scale_x_continuous(breaks = scales::pretty_breaks(n=12))+
theme_veg() +
theme(axis.text.y = element_text(face = "italic"), axis.text.x = element_text(angle = 90))+
geom_vline(xintercept = 0)
ggsave('SpBAchange.jpg', dpi = 600, height = 8, width = 8, path = "Graphs")
## subtraction change in Density
ggplot(pivotspecies_density,
aes(y = reorder(AcceptedSpecies, desc(AcceptedSpecies)),
x = change, fill = factor(direction)))+ # sets ggplot to show species change in density
geom_col(width = 0.4)+ #makes the ggplot a barplot
theme_light()+ #background theme
labs(y = 'Species Name', x = 'Change in Mean Density (stems/ha)', fill = "Direction")+ #x axis label
scale_fill_manual(breaks = c('Decrease', 'Increase'),
values = c('#FDB338', '#025196'))+ #manually setting color scale
scale_x_continuous(breaks = scales::pretty_breaks(n=12))+
theme_veg() +
theme(axis.text.y = element_text(face = "italic"), axis.text.x = element_text(angle = 90))+
geom_vline(xintercept = 0)
ggsave('SpDensitychange.jpg', dpi = 600, height = 8, width = 8, path = "Graphs")
sum_cols <- c("SumOfValue.1", "SumOfValue.2", "SumOfValue.3", "SumOfValue.4")
canopy1 <- canopy
canopy1$site = as.character(gsub("[[:alpha:]]", "", canopy1$LocationID)) # Extract site number using base R
canopy1[, sum_cols][canopy1[,sum_cols] < 0] <- NA #if any values <0 converts to NA
canopy2 <- canopy1 |>
mutate(C1 = SumOfValue.1 * 1.04, C2 = SumOfValue.2 * 1.04, C3 = SumOfValue.3 * 1.04, C4 = SumOfValue.4 * 1.04) |> #multiply by 1.04
mutate(plotmean = (C1+C2+C3+C4)/4) |> data.frame()#|> #Calculate Plot mean (n=4)
sxy_df2 <- canopy2 |> select(year = Year, site) |> unique()
canopy_site <- canopy2 |>
group_by(Year, site) |>
rename(year = Year) |>
summarize(sitemean = mean(plotmean))
if (n_sites >= 7) {
# Bootstrap function that will be used in purrr
boot_fxn <- function(dat, col){
dat1 <- data.frame(dat[,col]) # simplify dataframe into 1 column; not sure why I had to do this different than prev. boot_fun
samp <- data.frame(dat1[sample(nrow(dat1), nrow(dat1), replace = T),]) # sample the data once, returning same # rows with replacement
colnames(samp) <- "col" # name column so easier to specify
mean <- mean(samp$col) # calculate mean of that sample
return(data.frame(mean)) # return the mean as data.frame
}
canopy_year <-
purrr::map(year, function(yr){
dat <- canopy_site |> filter(year == yr)
dat2 <- data.frame(do.call(rbind, replicate(reps, boot_fxn(dat, "sitemean"), simplify = T)))
colnames(dat2) <- "samp_mean"
dat3 <- data.frame(yearmean = mean(dat$sitemean), # mean of raw data
CI_high = quantile(dat2$samp_mean, probs = 0.975, names = F), # upper 95% of bootstrapped means
CI_low= quantile(dat2$samp_mean, probs = 0.025, names = F),
year = yr,
num_boots = reps)
}) |> list_rbind() |>
select(year, yearmean, CI_low, CI_high, num_boots)
write.csv(canopy_year, 'Tables/canopyMean.csv', row.names = FALSE)
} else {
canopy_year <- canopy_site %>%
group_by(year) %>%
summarize(yearmean = (sum(sitemean)/n_sites),
CI_low= min(sitemean),#Calculate higher limit of 95% Confidence Interval
CI_high= max(sitemean)) #calculate lower limit of confidence interval
}
mean_canopy <-
ggplot(canopy_year, aes(x = year, y = yearmean)) +
geom_line(linewidth = 0.75, color = 'gray30') +
geom_errorbar(aes(x = year, ymin = CI_low, ymax = CI_high), width = 0.5, linewidth = 0.75, color = 'gray30') +
geom_point(size = 4, color = 'gray30') +
scale_y_continuous(expand = c(0,0), limits = c(0, 1.05*max(canopy_year$CI_high)))+
scale_x_continuous(breaks = scales::pretty_breaks(n=10))+
labs(y = 'Mean Canopy Cover (%)', x = 'Year')+
theme_light()+
theme_veg()
mean_canopy
ggsave("CanopyMean.jpg", dpi = 600, path = "Graphs", height = 4)
Canopy_by_site<- ggplot(canopy_site, aes(x = site, y =sitemean, fill=factor(year)))+ # makes ggplot of canopy with color indicating site
geom_col(position = 'dodge')+
scale_fill_grey()+
labs(y = 'Mean Canopy Cover (%)', x = 'Site', fill = "Year")+
scale_y_continuous(expand = c(0,0), limits = c(0, 1.05*max(canopy_site$sitemean)))+
theme_light()+
theme_veg()
Canopy_by_site
ggsave("CanopySite.jpg", dpi = 600, path = "Graphs", height = 4)
regeneration1 <- regeneration
names(regeneration1) <- gsub("SumOf", "", names(regeneration1)) # Drop SumOf from column names
regeneration1$site = as.character(gsub("[[:alpha:]]", "", regeneration1$LocationID)) # Extract site number using base R
type_regen1 <-
regeneration1 |> select(year = Year, site, AcceptedSpecies, Seedling, SmallSapling, LargeSapling) |> #selecting columns
pivot_longer(cols = c(Seedling, SmallSapling, LargeSapling), names_to = "class", values_to = "count") |> #making single row for each class
group_by(year, site, class) |>
summarize(sum1 = sum(count),
sum_ha = sum1/0.01,
.groups = 'drop')
if(n_sites >= 7){
yxc_df2 <- type_regen1 |> select(year, class) |> unique() |> data.frame()
type_regen <-
purrr::map2(yxc_df2$year, yxc_df2$class, function(yr, cls){
dat <- type_regen1 |> filter(year == yr & class == cls)
dat2 <- data.frame(do.call(rbind, replicate(reps, boot_fxn(dat, "sum_ha"), simplify = T)))
colnames(dat2) <- "samp_mean"
dat3 <- data.frame(year = yr,
class = cls,
meandensity = mean(dat$sum_ha), # mean of raw data
CI_low = quantile(dat2$samp_mean, probs = 0.025, names = F),
CI_high = quantile(dat2$samp_mean, probs = 0.975, names = F), # upper 95% of bootstrapped means
num_boots = reps)
}) |> list_rbind()|>
mutate(class = ifelse(class == "LargeSapling", "Large Sapling", ifelse(class == "SmallSapling", "Small Sapling", "Seedling")))
write.csv(type_regen, "Tables/RegenType.csv")
type_regen
} else{
type_regen <- type_regen1 |>
group_by(year, class)|>
summarise(meandensity = (sum(sum_ha)/n_sites),#calculate mean density
CI_low = min(sum_ha), #calculate low end of 95 conf interval
CI_high = max(sum_ha)) |> #calculate low end of 95 conf interval
mutate(class = ifelse(class == "LargeSapling", "Large Sapling", ifelse(class == "SmallSapling", "Small Sapling", "Seedling")))
write.csv(type_regen, "Tables/RegenType.csv", row.names = FALSE)
type_regen
}
type_regen$class <- factor(type_regen$class, levels = c("Seedling", "Small Sapling", "Large Sapling"))
type_regen_graph <-
ggplot(type_regen |> arrange(meandensity), aes(x = class, y = meandensity, fill = factor(year)))+
scale_fill_grey()+
geom_col(position = "dodge")+ #sets bars next to each other
geom_errorbar(aes(x = class, ymin = CI_low, ymax= CI_high), width = 0.2, position = position_dodge(0.9), linewidth = 0.2)+ #add error bar
labs(y = 'Mean Density (stems/ha)', fill = "Year")+
scale_y_continuous(expand = c(0,0), limits = c(0, 1.05*max(type_regen$CI_high)))+
theme_light()+
theme_veg()
type_regen_graph
ggsave('RegenType.jpg', path = "Graphs", dpi= 600)
#this creates the dataframe used to generate graphs
regen_species1 <- regeneration1 |>
select(year = Year, site, AcceptedSpecies, Seedling, SmallSapling, LargeSapling) |>
pivot_longer(cols = c(Seedling, SmallSapling, LargeSapling), names_to = "class", values_to = "count")|> #making each class its own row
mutate(density_ha = count/0.01)|> #convert density to ha
select(!count)|>
group_by(year, AcceptedSpecies, class)|> #sort by species each year
summarise(year_density = (sum(density_ha)/n_sites), .groups = 'drop') |> #summarise the year mean density class
arrange(desc(AcceptedSpecies), factor(class, c("Seedling", "SmallSapling", "LargeS")))
regen_species_curr <- regen_species1 |> filter(year == current)
regen_species_first <- regen_species1 |> filter(year == first)
regen_species2 <- full_join(regen_species_curr |> select(-year),
regen_species_first |> select(-year),
by = c("AcceptedSpecies", "class"),
suffix = c("_curr", "_first")) |>
mutate(year_density_curr = ifelse(is.na(year_density_curr), 0, year_density_curr),
year_density_first = ifelse(is.na(year_density_first), 0, year_density_first),
change = year_density_curr - year_density_first,
direction = case_when(change > 0 ~ "Increase",
change < 0 ~ "Decrease",
change == 0 ~ "No change")) |>
arrange(AcceptedSpecies) |>
select(AcceptedSpecies, class, change, direction)
regen_species <- regen_species2 |>
right_join(regen_species1, by = c("AcceptedSpecies", "class")) |>
group_by(AcceptedSpecies, class) |>
mutate(check = sum(year_density)) |>
filter(check != 0) |>
select(-c(check, year, year_density))|>
distinct()
#table(regenSpecies_comb$AcceptedSpecies, regenSpecies_comb$class) # make sure every species/class is represented only once
#this creates the wider dataframe to export
class_changes <- regen_species |>
select(-direction)|>
pivot_wider(names_from = class, values_from = change)|>
rename(change_seedling = Seedling,
change_smallsapling = SmallSapling,
change_largesapling = LargeSapling)
# Set order of factor levels for class
regen_species1$class <- factor(regen_species1$class, levels = c("Seedling", "SmallSapling", "LargeSapling"))
regen_species_table <- regen_species1 |>
arrange(class) |>
pivot_wider(names_from = c(class, year), values_from = year_density)|>
arrange(AcceptedSpecies)|>
left_join(class_changes, by = "AcceptedSpecies")
write.csv(regen_species_table, "Tables/RegenSpecies.csv", row.names = F)
regen_species_table
## Seedling
seedling <-
ggplot(regen_species |> filter(class == "Seedling"),
aes(y = reorder(AcceptedSpecies, desc(AcceptedSpecies)),
x = change, fill = direction))+ #ggplot y axis barplot with colors based on increase or decrease
geom_col(width = 0.4)+ #width of columns
theme_light()+
xlab('Change in Mean Density (stems/ha)')+
ylab('Species Name')+
labs(title = 'Seedlings', fill = "Direction")+
scale_fill_manual(breaks = c('Decrease','Increase'),
values = c('#FDB338', '#025196'))+ #sets color for increase/decrease
scale_x_continuous(breaks = scales::pretty_breaks(n=15))+ #changes number of ticks on x axis
theme_veg()+
theme(axis.text.y = element_text(face = "italic"), #makes species names italic
axis.text.x = element_text(angle = 90))+
geom_vline(xintercept = 0)
seedling
ggsave('RegenSpSeedling.jpg', path = "Graphs", dpi= 600, height = 6)
## Small Sapling
smallsapling <-
ggplot(regen_species |> filter(class == "SmallSapling"),
aes(y = reorder(AcceptedSpecies, desc(AcceptedSpecies)),
x = change, fill = direction))+#ggplot y axis barplot with colors based on increase or decrease
geom_col(width = 0.4)+#width of columns
theme_light()+
xlab('Change in Mean Density (stems/ha)')+
ylab('Species Name')+
labs(title = 'Small Saplings', fill = "Direction")+
scale_fill_manual(breaks = c('Decrease','Increase', 'No change'),
values = c('#FDB338', '#025196', 'dimgrey'))+#sets color for increase/decrease
scale_x_continuous(breaks = scales::pretty_breaks(n=15))+#changes number of ticks on x axis
theme_veg()+
theme(axis.text.y = element_text(face = "italic"),#makes species names italic
axis.text.x = element_text(angle = 90))+
geom_vline(xintercept = 0)
smallsapling
ggsave('RegenSpSmallSap.jpg', path = "Graphs", dpi= 600, height = 6)
## Large Sapling
largesapling <-
ggplot(regen_species |> filter(class == 'LargeSapling'), #filter for large saplings
aes(y = reorder(AcceptedSpecies, desc(AcceptedSpecies)),
x = change, fill = direction)) + #ggplot y axis barplot with colors based on increase or decrease
geom_col(width = 0.4)+ #width of columns
theme_light()+
xlab('Change in Mean Density (stems/ha)')+
ylab('Species Name')+
labs(title = 'Large Saplings', fill = "Direction")+
scale_fill_manual(breaks = c(breaks = c('Decrease','Increase', 'No change')),
values = c('#FDB338', '#025196', 'dimgrey'))+#sets color for increase/decrease
theme_veg()+
theme(axis.text.y = element_text(face = "italic"))+#makes species names italic
geom_vline(xintercept = 0)
largesapling
ggsave('RegenSpLargeSap.jpg', path = "Graphs", dpi=600, height = 6)
